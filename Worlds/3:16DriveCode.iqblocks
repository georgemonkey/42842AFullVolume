{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"-1230\" y=\"10\"><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"3IC;xWHLx_,XU2K!q)-C\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"mJO_FjT4!62U7$xR09_Z\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"8]AK4){2V$e,rNE8oq6A\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"2(4GRn7j7m6eG-$TpGc?\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"#B`d^Z@i1C4?}l0uJu1E\"><field name=\"MOTOR\">leftpto</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"a2Out7B+_K`NZOK9,g]!\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"^}btP(~nkmI}!_/SacC*\"><field name=\"MOTOR\">rightpto</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"LUr^Kc$Xf@p/;aKM]cSB\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"]PE]=Tp0$~f~RjVgND2C\"><field name=\"MOTOR\">leftpto</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"~y=McnVDhoqay%)kl@H0\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"`#W6:M4nRm?!BE@iYylL\"><field name=\"MOTOR\">rightpto</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"X;XzH=vEFSc1b1h+C$2S\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"qlpax}]jx%0Lmma_#yh)\" x=\"-430\" y=\"150\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"Js.9Yh(.-pKq#Oh})U@%\"><field name=\"MOTOR\">rightpto</field><field name=\"DIRECTION\">rev</field><next><block type=\"iq_motion_spin\" id=\"0CpMN;wx$hf^+h[f$|QC\"><field name=\"MOTOR\">leftpto</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"a2x|8+#YCTj$tkM+Bp}@\" x=\"-470\" y=\"410\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"2}#+7bDML9`9l{:[OT+v\"><field name=\"MOTOR\">rightpto</field><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_motion_spin\" id=\"mm)~dEEye_/j@$WI|uV5\"><field name=\"MOTOR\">leftpto</field><field name=\"DIRECTION\">rev</field></block></next></block></next></block><block type=\"iq_events_when_started\" id=\"m5I:DbBQ9g26-;QDH=5e\" x=\"-850\" y=\"570\"><next><block type=\"iq_control_if_then\" id=\"-%GDdG}ax:S8xU*q4U:2\"></block></next></block><block type=\"iq_events_when_controller_button\" id=\"7zk(L}j4twAh@f$}|T.0\" x=\"-470\" y=\"630\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\")4GNpT%Eib6`ihv7vS*_\"><field name=\"MOTOR\">leftpto</field><next><block type=\"iq_motion_stop_motor\" id=\"6p,8w:+jwA6MA$mx03/?\"><field name=\"MOTOR\">rightpto</field></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"4L^SUX!=Q[F114_$(p9!\" x=\"-230\" y=\"770\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_stop_motor\" id=\"cb-lXCH;c1U2h8Q`bOTx\"><field name=\"MOTOR\">leftpto</field><next><block type=\"iq_motion_stop_motor\" id=\"Qx`[hcw1hhyN[eu`#k-s\"><field name=\"MOTOR\">rightpto</field></block></next></block></next></block></xml>","rconfig":[{"port":[6,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5,4],"name":"leftpto","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[11,10],"name":"rightpto","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT6, 1, false);\nmotor RightDriveSmart = motor(PORT12, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor leftptoMotorA = motor(PORT5, true);\nmotor leftptoMotorB = motor(PORT4, false);\nmotor_group leftpto = motor_group(leftptoMotorA, leftptoMotorB);\n\nmotor rightptoMotorA = motor(PORT11, true);\nmotor rightptoMotorB = motor(PORT10, false);\nmotor_group rightpto = motor_group(rightptoMotorA, rightptoMotorB);\n\ncontroller Controller = controller();\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  leftpto.setVelocity(100.0, percent);\n  rightpto.setVelocity(100.0, percent);\n  leftpto.setMaxTorque(100.0, percent);\n  rightpto.setMaxTorque(100.0, percent);\n  return 0;\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  rightpto.spin(reverse);\n  leftpto.spin(forward);\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  rightpto.spin(forward);\n  leftpto.spin(reverse);\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  if (false) {\n  }\n  return 0;\n}\n\n// \"when Controller ButtonRDown released\" hat block\nvoid onevent_ControllerButtonRDown_released_0() {\n  leftpto.stop();\n  rightpto.stop();\n}\n\n// \"when Controller ButtonRUp released\" hat block\nvoid onevent_ControllerButtonRUp_released_0() {\n  leftpto.stop();\n  rightpto.stop();\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n  Controller.ButtonRDown.released(onevent_ControllerButtonRDown_released_0);\n  Controller.ButtonRUp.released(onevent_ControllerButtonRUp_released_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}