{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nLDT = Motor(Ports.PORT6, False)\nRDT = Motor(Ports.PORT12, False)\nILSolenoid = Pneumatic(Ports.PORT5)\nPFSolenoid = Pneumatic(Ports.PORT11)\nLPTO_motor_a = Motor(Ports.PORT1, False)\nLPTO_motor_b = Motor(Ports.PORT2, False)\nLPTO = MotorGroup(LPTO_motor_a, LPTO_motor_b)\nRPTO_motor_a = Motor(Ports.PORT7, False)\nRPTO_motor_b = Motor(Ports.PORT8, False)\nRPTO = MotorGroup(RPTO_motor_a, RPTO_motor_b)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nLDT.set_stopping(HOLD)\nRDT.set_stopping(HOLD)\n\n\ndef turning(target_angle, Kp=2.9, Ki=0, Kd=47, tol=1.5):\n    LDT.spin(REVERSE)\n    RDT.spin(REVERSE)\n    LDT.set_stopping(HOLD)\n    RDT.set_stopping(HOLD)\n\n    integral = 0;\n    prev_error = 0;\n\n    while True:\n        LDT.set_stopping(HOLD)\n        RDT.set_stopping(HOLD)\n        #finding error\n        \n        error = target_angle-facing\n        #integral stuff\n        integral += error\n        if error > 180:\n            error = error-360\n        if error < -180:\n            error = error+360\n        if error == 0 or abs(error) > 40:\n            integral = 0\n        #finding derivative\n        derivative = error - prev_error\n        #setting previous error to current error\n        prev_error = error\n        #calculating speed\n        speed = Kp*error + Ki*integral + Kd*derivative\n        #setting speed\n        LDT.set_velocity(speed)\n        RDT.set_velocity(speed)\n        #checking if turn is complete\n        if abs(error) < tol:\n            LDT.stop()\n            RDT.stop()\n            break\n        #allowing motors to run\n        wait(10,MSEC)   \n \ndef forward(time,vel):\n    LDT.set_stopping(BRAKE)\n    RDT.set_stopping(BRAKE)\n    LDT.set_velocity(vel,PERCENT)\n    RDT.set_velocity(vel,PERCENT)\n    LDT.spin(REVERSE)\n    RDT.spin(FORWARD)\n    wait(time,MSEC)\n    LDT.stop()\n    RDT.stop()\n\ndef backward(time,vel):\n    LDT.set_stopping(BRAKE)\n    RDT.set_stopping(BRAKE)\n    LDT.set_velocity(vel,PERCENT)\n    RDT.set_velocity(vel,PERCENT)\n    LDT.spin(FORWARD)\n    RDT.spin(REVERSE)\n    wait(time,MSEC)\n    LDT.stop()\n    RDT.stop()\n \ndef run():\n\n    \n    \n\n    ILSolenoid.pump_on()\n    PFSolenoid.pump_on()\n\n    \n    \n    #get star\n    forward(800,70)\n    wait(500,MSEC)\n\n\n\n\n'''\ndef turning(target_angle, KP=-1 , KD = 0, KI = 0, tol = 1.5, p = 3, wasting_time = True):\n    LDT.spin(REVERSE)\n    RDT.spin(REVERSE)\n    t3.set_color(Color.RED)\n    t4.set_color(Color.RED)\n\n    # Set the constants for the PID loop\n\n\n    error_sum = 0  # Initialize the error sum\n    last_error = 0  # Initialize the last error\n    error_offset = 0\n    prev_errors = [0,0,0]\n    while True:\n        \n        LDT.set_stopping(HOLD)\n        RDT.set_stopping(HOLD)\n        # Read the gyro5 angle\n        facing = gyro5.heading()\n\n        # Calculate the error`\n        error = target_angle - facing\n        error = error*-1\n        if error > 180:\n            error = error-360\n        if error < -180:\n            error = error+360\n\n        ##print(str(error))\n        # Calculate the proportional term\n        p_term = KP * error\n\n        # Calculate the integral term\n        error_sum += error\n        i_term = KI * error_sum\n        #if i_term > 50 or i_term < -50: \n        #    i_term = 0\n        # Calculate the derivative term\n        d_term = KD * (error - last_error)\n        last_error = error\n\n        # Calculate the PID output\n        if i_term >= 20:\n            i_term = 0\n        pid_output = p_term + i_term/10 + d_term\n        #brain.screen.#print(str(gyro5.heading()))\n\n        \n        \n        #print(str(pid_output) + \" p:\" + str(p_term) + \" i:\" + str(i_term/10) + \" d:\" +str(d_term) + \" e:\" + str(error))\n        #print()\n        pid_output = pid_output/p\n        # Set the motor speeds based on the PID output\n        LDT.set_velocity(pid_output)\n        RDT.set_velocity(pid_output)\n\n        # Check if the turn is complete\n        \n        #print(str(abs(error)))\n    \n        prev_errors[error_offset] = error\n        error_offset += 1\n        if error_offset == 3:\n            error_offset = 0\n        total_errors = 0\n        change_in_error = 0\n        change_in_error_large = False\n\n        for loop in range(len(prev_errors)):\n            ##print(str(i))\n            prev_error_number = prev_errors[loop]\n            total_errors += prev_error_number\n            if loop > 0:\n                change_in_error = prev_errors[loop] - prev_errors[loop-1]\n                #print(change_in_error)\n                if abs(float(change_in_error)) >= 0.07:\n                    change_in_error_large = True\n        if prev_errors[2] != 0:\n            if not change_in_error_large:\n                for x in range(5):\n                    pass\n                KP += 0.05\n        avg_error = total_errors/len(prev_errors)\n        if abs(error) < tol and abs(avg_error) < tol:\n            LDT.stop()\n            RDT.stop()\n            break\n\n        wait(10,MSEC)  # Wait for 20ms to allow the motors to move\n\n\n\n\n    t3.set_color(Color.GREEN)\n    t4.set_color(Color.GREEN)\n'''","textLanguage":"python","rconfig":[{"port":[6],"name":"LDT","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"RDT","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"ILSolenoid","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false"},"triportSourcePort":22},{"port":[11],"name":"PFSolenoid","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false"},"triportSourcePort":22},{"port":[1,2],"name":"LPTO","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[7,8],"name":"RPTO","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":3,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}