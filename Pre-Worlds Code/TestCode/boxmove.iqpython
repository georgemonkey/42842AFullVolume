{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, 1, False)\nright_drive_smart = Motor(Ports.PORT1, 1, True)\ndrivetrain_gyro = Gyro(Ports.PORT2)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gyro, 200)\n\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Gyro\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Gyro\")\n    drivetrain_gyro.calibrate(GyroCalibrationType.NORMAL)\n    while drivetrain_gyro.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n#endregion VEXcode Generated Robot Configuration\n\nfrom vex import *\nimport urandom\n\n\n\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_motor = Motor(Ports.PORT1, False)\nright_motor = Motor(Ports.PORT6, False)\ngyro5 = Gyro(Ports.PORT2)\n\n\ndef turning(target_angle, KP=4, KD = 10 , KI = 0.00, tol = 1, p = 3, wasting_time = True):\n    left_motor.spin(REVERSE)\n    right_motor.spin(REVERSE)\n   \n    # Set the constants for the PID loop\n\n\n    error_sum = 0  \n    last_error = 0  \n    error_offset = 0\n    prev_errors = [0,0,0]\n    while True:\n        \n        left_motor.set_stopping(HOLD)\n        right_motor.set_stopping(HOLD)\n        \n        facing = gyro5.heading()\n\n        \n        error = target_angle - facing\n        error = error*-1\n        if error > 180:\n            error = error-360\n        if error <-180:\n            error = error+360\n\n     \n        p_term = KP * error\n\n       \n        error_sum += error\n        i_term = KI * error_sum\n        \n        d_term = KD * (error - last_error)\n        last_error = error\n\n        i_term = 0\n        pid_output = p_term + i_term/10 + d_term\n        \n\n        \n        \n        #print(str(pid_output) + \" p:\" + str(p_term) + \" i:\" + str(i_term/10) + \" d:\" +str(d_term) + \" e:\" + str(error))\n        print(str(gyro5.heading()))\n        pid_output = pid_output/p\n        # Set the motor speeds based on the PID output\n        left_motor.set_velocity(pid_output)\n        right_motor.set_velocity(pid_output)\n\n        # Check if the turn is complete\n        \n        #print(str(abs(error)))\n    \n        prev_errors[error_offset] = error\n        error_offset += 1\n        if error_offset == 3:\n            error_offset = 0\n        total_errors = 0\n        change_in_error = 0\n        change_in_error_large = False\n        \n        for loop in range(len(prev_errors)):\n            ##print(str(i))\n            prev_error_number = prev_errors[loop]\n            total_errors += prev_error_number\n            if loop > 0:\n                change_in_error = prev_errors[loop] - prev_errors[loop-1]\n                #print(change_in_error)\n                if abs(float(change_in_error)) >= 0.07:\n                    change_in_error_large = True\n        if prev_errors[2] != 0:\n            if not change_in_error_large:\n                for x in range(5):\n                    pass\n                KP += 0.1\n        avg_error = total_errors/len(prev_errors)\n        \n        if abs(error) < tol and abs(avg_error) < tol:\n            left_motor.stop()\n            right_motor.stop()\n            break\n\n        wait(10,MSEC)  \ndef forward(dist):\n   \n\n   \n   left_motor.set_velocity(100,PERCENT)\n   right_motor.set_velocity(100,PERCENT)\n   right_motor.spin(REVERSE)\n   left_motor.spin(FORWARD)\n   wait(dist,SECONDS)   \n   left_motor.stop() \n   right_motor.stop()\n\n\n\n\n\nforward(3.5)\nwait(10,MSEC) \nturning(90)\nwait(10,MSEC) \nforward(4)\nwait(10,MSEC) \nturning(180)\nwait(10,MSEC) \nforward(1)\nwait(10,MSEC) \nturning(270)  \nwait(10,MSEC) \nforward(4.5)\nwait(10,MSEC) \nturning(180)\nwait(10,MSEC) \nforward(2)\n\n\n\n\n\n\n\n\n\n\n\n","textLanguage":"python","rconfig":[{"port":[6,1,2],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}